$version Generated by VerilatedVcd $end
$date Tue Dec 13 18:33:50 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 2! a0W [31:0] $end
  $var wire  1 0! clk $end
  $var wire  1 1! rst $end
  $var wire  1 /! trigger $end
  $scope module cpu_pipelined $end
   $var wire 32 5! WIDTH [31:0] $end
   $var wire 32 l a0D [31:0] $end
   $var wire 32 > a0E [31:0] $end
   $var wire 32 R a0M [31:0] $end
   $var wire 32 2! a0W [31:0] $end
   $var wire  1 / addupperD $end
   $var wire  1 8 addupperE $end
   $var wire  4 5 aluctrlD [3:0] $end
   $var wire  4 F aluctrlE [3:0] $end
   $var wire 32 I aluresultE [31:0] $end
   $var wire 32 O aluresultM [31:0] $end
   $var wire 32 Z aluresultW [31:0] $end
   $var wire  1 . alusrcD $end
   $var wire  1 9 alusrcE $end
   $var wire  1 0! clk $end
   $var wire  3 6 funct3D [2:0] $end
   $var wire  3 G funct3E [2:0] $end
   $var wire  3 T funct3M [2:0] $end
   $var wire 32 2 immextD [31:0] $end
   $var wire 32 A immextE [31:0] $end
   $var wire 32 ) instrD [31:0] $end
   $var wire 32 & instrF [31:0] $end
   $var wire  1 0 jbmuxD $end
   $var wire  1 < jbmuxE $end
   $var wire  1 - memwriteD $end
   $var wire  1 : memwriteE $end
   $var wire  1 M memwriteM $end
   $var wire  7 3 opcodeD [6:0] $end
   $var wire  7 D opcodeE [6:0] $end
   $var wire 32 ( pcD [31:0] $end
   $var wire 32 B pcE [31:0] $end
   $var wire 32 % pcF [31:0] $end
   $var wire 32 * pcplusfourD [31:0] $end
   $var wire 32 C pcplusfourE [31:0] $end
   $var wire 32 ' pcplusfourF [31:0] $end
   $var wire 32 Q pcplusfourM [31:0] $end
   $var wire 32 [ pcplusfourW [31:0] $end
   $var wire  1 J pcsrcE $end
   $var wire 32 H pctargetE [31:0] $end
   $var wire  1 1 pcwritemuxD $end
   $var wire  1 = pcwritemuxE $end
   $var wire  1 N pcwritemuxM $end
   $var wire  1 X pcwritemuxW $end
   $var wire 32 3! rd1D [31:0] $end
   $var wire 32 ? rd1E [31:0] $end
   $var wire 32 4! rd2D [31:0] $end
   $var wire 32 @ rd2E [31:0] $end
   $var wire  5 4 rdD [4:0] $end
   $var wire  5 E rdE [4:0] $end
   $var wire  5 S rdM [4:0] $end
   $var wire  5 \ rdW [4:0] $end
   $var wire 32 U read_dataM [31:0] $end
   $var wire 32 Y read_dataW [31:0] $end
   $var wire  1 + regwriteD $end
   $var wire  1 7 regwriteE $end
   $var wire  1 K regwriteM $end
   $var wire  1 V regwriteW $end
   $var wire 32 ] resultW [31:0] $end
   $var wire  1 , resultsrcD $end
   $var wire  1 ; resultsrcE $end
   $var wire  1 L resultsrcM $end
   $var wire  1 W resultsrcW $end
   $var wire  1 1! rst $end
   $var wire  1 /! trigger $end
   $var wire 32 P write_dataM [31:0] $end
   $scope module decode $end
    $var wire 32 l a0D [31:0] $end
    $var wire  5 a ad1D [4:0] $end
    $var wire  5 b ad2D [4:0] $end
    $var wire  5 \ ad3D [4:0] $end
    $var wire  1 / addupperD $end
    $var wire  4 5 aluctrlD [3:0] $end
    $var wire  1 . alusrcD $end
    $var wire  1 0! clk $end
    $var wire  3 6 funct3D [2:0] $end
    $var wire  1 ^ funct7D $end
    $var wire 32 2 immopD [31:0] $end
    $var wire  3 _ immsrcD [2:0] $end
    $var wire 32 ) instrD [31:0] $end
    $var wire  1 0 jbmuxD $end
    $var wire  1 - memwriteD $end
    $var wire  7 3 opcodeD [6:0] $end
    $var wire  1 1 pcwritemuxD $end
    $var wire 32 3! rd1D [31:0] $end
    $var wire 32 4! rd2D [31:0] $end
    $var wire  5 4 rdD [4:0] $end
    $var wire  1 + regwriteD $end
    $var wire  1 , resultsrcD $end
    $var wire 25 ` signextinD [24:0] $end
    $var wire  1 /! triggerD $end
    $var wire 32 ] wd3D [31:0] $end
    $var wire  1 V we3D $end
    $scope module ctrlunitD $end
     $var wire  1 / addupper $end
     $var wire  4 5 aluctrl [3:0] $end
     $var wire  2 c aluop [1:0] $end
     $var wire  1 . alusrc $end
     $var wire  3 6 funct3 [2:0] $end
     $var wire  1 ^ funct7 $end
     $var wire  3 _ immsrc [2:0] $end
     $var wire  1 0 jbmux $end
     $var wire  1 - memwrite $end
     $var wire  7 3 opcode [6:0] $end
     $var wire  1 1 pcwritemux $end
     $var wire  1 + regwrite $end
     $var wire  1 , resultsrc $end
    $upscope $end
    $scope module rfD $end
     $var wire 32 6! A_WIDTH [31:0] $end
     $var wire 32 5! D_WIDTH [31:0] $end
     $var wire 32 l a0 [31:0] $end
     $var wire  5 a ad1 [4:0] $end
     $var wire  5 b ad2 [4:0] $end
     $var wire  5 \ ad3 [4:0] $end
     $var wire  1 0! clk $end
     $var wire 32 3! rd1 [31:0] $end
     $var wire 32 4! rd2 [31:0] $end
     $var wire 32 m rf_array[0] [31:0] $end
     $var wire 32 w rf_array[10] [31:0] $end
     $var wire 32 x rf_array[11] [31:0] $end
     $var wire 32 y rf_array[12] [31:0] $end
     $var wire 32 z rf_array[13] [31:0] $end
     $var wire 32 { rf_array[14] [31:0] $end
     $var wire 32 | rf_array[15] [31:0] $end
     $var wire 32 } rf_array[16] [31:0] $end
     $var wire 32 ~ rf_array[17] [31:0] $end
     $var wire 32 !! rf_array[18] [31:0] $end
     $var wire 32 "! rf_array[19] [31:0] $end
     $var wire 32 n rf_array[1] [31:0] $end
     $var wire 32 #! rf_array[20] [31:0] $end
     $var wire 32 $! rf_array[21] [31:0] $end
     $var wire 32 %! rf_array[22] [31:0] $end
     $var wire 32 &! rf_array[23] [31:0] $end
     $var wire 32 '! rf_array[24] [31:0] $end
     $var wire 32 (! rf_array[25] [31:0] $end
     $var wire 32 )! rf_array[26] [31:0] $end
     $var wire 32 *! rf_array[27] [31:0] $end
     $var wire 32 +! rf_array[28] [31:0] $end
     $var wire 32 ,! rf_array[29] [31:0] $end
     $var wire 32 o rf_array[2] [31:0] $end
     $var wire 32 -! rf_array[30] [31:0] $end
     $var wire 32 .! rf_array[31] [31:0] $end
     $var wire 32 p rf_array[3] [31:0] $end
     $var wire 32 q rf_array[4] [31:0] $end
     $var wire 32 r rf_array[5] [31:0] $end
     $var wire 32 s rf_array[6] [31:0] $end
     $var wire 32 t rf_array[7] [31:0] $end
     $var wire 32 u rf_array[8] [31:0] $end
     $var wire 32 v rf_array[9] [31:0] $end
     $var wire  1 /! trigger $end
     $var wire 32 ] wd3 [31:0] $end
     $var wire  1 V we3 $end
     $scope module unnamedblk1 $end
      $var wire 32 # i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module signexD $end
     $var wire 32 2 immop [31:0] $end
     $var wire  3 _ immsrc [2:0] $end
     $var wire 25 ` instruction [31:7] $end
    $upscope $end
   $upscope $end
   $scope module execute $end
    $var wire 32 5! D_WIDTH [31:0] $end
    $var wire  1 8 addupper $end
    $var wire  4 F aluctrl [3:0] $end
    $var wire 32 I aluout [31:0] $end
    $var wire  1 9 alusrc $end
    $var wire  1 d eq $end
    $var wire  3 G funct3 [2:0] $end
    $var wire 32 A immop [31:0] $end
    $var wire  1 < jbmux $end
    $var wire 32 H jumpaddress [31:0] $end
    $var wire  7 D opcode [6:0] $end
    $var wire  1 J pcsrc $end
    $var wire 32 B prog_addr [31:0] $end
    $var wire 32 @ regop2 [31:0] $end
    $var wire 32 ? rf_dout1 [31:0] $end
    $var wire 32 e rfpc [31:0] $end
    $scope module alu $end
     $var wire 32 5! D_WIDTH [31:0] $end
     $var wire  4 F aluctrl [3:0] $end
     $var wire 32 e aluop1 [31:0] $end
     $var wire 32 f aluop2 [31:0] $end
     $var wire 32 I aluout [31:0] $end
     $var wire  1 9 alusrc $end
     $var wire  1 d eq $end
     $var wire 32 A immop [31:0] $end
     $var wire 32 @ regop2 [31:0] $end
    $upscope $end
   $upscope $end
   $scope module fetch $end
    $var wire 32 5! A_WIDTH [31:0] $end
    $var wire  1 0! clk $end
    $var wire 32 & dout [31:0] $end
    $var wire 32 H jumpaddress [31:0] $end
    $var wire 32 % pc [31:0] $end
    $var wire 32 ' pc_plus4 [31:0] $end
    $var wire  1 J pcsrc $end
    $var wire  1 1! rst $end
    $scope module instrmem $end
     $var wire 32 5! A_WIDTH [31:0] $end
     $var wire 32 7! D_WIDTH [31:0] $end
     $var wire 32 % address [31:0] $end
     $var wire 32 & dout [31:0] $end
    $upscope $end
    $scope module pcountunit $end
     $var wire 32 5! WIDTH [31:0] $end
     $var wire  1 0! clk $end
     $var wire 32 H jumpaddress [31:0] $end
     $var wire 32 g next_pc [31:0] $end
     $var wire 32 % pc [31:0] $end
     $var wire 32 ' pc_plus4 [31:0] $end
     $var wire  1 J pcsrc $end
     $var wire  1 1! rst $end
    $upscope $end
   $upscope $end
   $scope module memory $end
    $var wire 32 5! ADDRESS_WIDTH [31:0] $end
    $var wire 32 5! DATA_WIDTH [31:0] $end
    $var wire 32 i address [31:0] $end
    $var wire  3 T addrmode [2:0] $end
    $var wire  1 0! clk $end
    $var wire 32 k ramin [31:0] $end
    $var wire 32 j ramout [31:0] $end
    $var wire 32 U read_data [31:0] $end
    $var wire  2 h selectbytes [1:0] $end
    $var wire 32 P write_data [31:0] $end
    $var wire  1 M write_enable $end
    $scope module loadmem $end
     $var wire 32 5! D_WIDTH [31:0] $end
     $var wire  3 T addrmode [2:0] $end
     $var wire 32 j ramout [31:0] $end
     $var wire 32 U read_data [31:0] $end
     $var wire  2 h selectbytes [1:0] $end
    $upscope $end
    $scope module ram $end
     $var wire 32 5! ADDRESS_WIDTH [31:0] $end
     $var wire 32 7! DATA_WIDTH [31:0] $end
     $var wire 32 i address [31:0] $end
     $var wire  1 0! clk $end
     $var wire 32 k ramin [31:0] $end
     $var wire 32 j ramout [31:0] $end
     $var wire  1 M write_enable $end
     $scope module unnamedblk1 $end
      $var wire 32 $ i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module storemem $end
     $var wire 32 5! DATA_WIDTH [31:0] $end
     $var wire  3 T addrmode [2:0] $end
     $var wire 32 k ramdin [31:0] $end
     $var wire 32 j ramout [31:0] $end
     $var wire  2 h selectbytes [1:0] $end
     $var wire 32 P write_data [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
0+
0,
0-
0.
0/
00
01
b00000000000000000000000000000000 2
b0000000 3
b00000 4
b0000 5
b000 6
07
08
09
0:
0;
0<
0=
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b0000000 D
b00000 E
b0000 F
b000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
0J
0K
0L
0M
0N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000 S
b000 T
b00000000000000000000000000000000 U
0V
0W
0X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000 \
b00000000000000000000000000000000 ]
0^
b000 _
b0000000000000000000000000 `
b00000 a
b00000 b
b00 c
0d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
0/!
00!
01!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000100000 5!
b00000000000000000000000000000101 6!
b00000000000000000000000000001000 7!
